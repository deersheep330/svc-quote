# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.protos import database_pb2 as api_dot_protos_dot_database__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_stocks = channel.unary_stream(
                '/Database/get_stocks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.Stock.FromString,
                )
        self.get_stock = channel.unary_unary(
                '/Database/get_stock',
                request_serializer=api_dot_protos_dot_database__pb2.Symbol.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.Stock.FromString,
                )
        self.upsert_stocks = channel.stream_unary(
                '/Database/upsert_stocks',
                request_serializer=api_dot_protos_dot_database__pb2.Stock.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_ptt_trend = channel.unary_unary(
                '/Database/insert_ptt_trend',
                request_serializer=api_dot_protos_dot_database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_reunion_trend = channel.unary_unary(
                '/Database/insert_reunion_trend',
                request_serializer=api_dot_protos_dot_database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_twse_over_bought = channel.unary_unary(
                '/Database/insert_twse_over_bought',
                request_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_twse_over_sold = channel.unary_unary(
                '/Database/insert_twse_over_sold',
                request_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.query_twse_over_bought_by_date = channel.unary_stream(
                '/Database/query_twse_over_bought_by_date',
                request_serializer=google_dot_protobuf_dot_timestamp__pb2.Timestamp.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                )
        self.query_twse_over_sold_by_date = channel.unary_stream(
                '/Database/query_twse_over_sold_by_date',
                request_serializer=google_dot_protobuf_dot_timestamp__pb2.Timestamp.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                )
        self.insert_fugle_over_bought = channel.unary_unary(
                '/Database/insert_fugle_over_bought',
                request_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_fugle_over_sold = channel.unary_unary(
                '/Database/insert_fugle_over_sold',
                request_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_twse_open_price = channel.unary_unary(
                '/Database/insert_twse_open_price',
                request_serializer=api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_twse_close_price = channel.unary_unary(
                '/Database/insert_twse_close_price',
                request_serializer=api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )
        self.insert_us_close_price = channel.unary_unary(
                '/Database/insert_us_close_price',
                request_serializer=api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
                response_deserializer=api_dot_protos_dot_database__pb2.RowCount.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_stocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_stock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upsert_stocks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_ptt_trend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_reunion_trend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_over_bought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_over_sold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_twse_over_bought_by_date(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_twse_over_sold_by_date(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_fugle_over_bought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_fugle_over_sold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_open_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_close_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_us_close_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_stocks': grpc.unary_stream_rpc_method_handler(
                    servicer.get_stocks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.Stock.SerializeToString,
            ),
            'get_stock': grpc.unary_unary_rpc_method_handler(
                    servicer.get_stock,
                    request_deserializer=api_dot_protos_dot_database__pb2.Symbol.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.Stock.SerializeToString,
            ),
            'upsert_stocks': grpc.stream_unary_rpc_method_handler(
                    servicer.upsert_stocks,
                    request_deserializer=api_dot_protos_dot_database__pb2.Stock.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_ptt_trend': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_ptt_trend,
                    request_deserializer=api_dot_protos_dot_database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_reunion_trend': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_reunion_trend,
                    request_deserializer=api_dot_protos_dot_database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_over_bought': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_over_bought,
                    request_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_over_sold': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_over_sold,
                    request_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'query_twse_over_bought_by_date': grpc.unary_stream_rpc_method_handler(
                    servicer.query_twse_over_bought_by_date,
                    request_deserializer=google_dot_protobuf_dot_timestamp__pb2.Timestamp.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            ),
            'query_twse_over_sold_by_date': grpc.unary_stream_rpc_method_handler(
                    servicer.query_twse_over_sold_by_date,
                    request_deserializer=google_dot_protobuf_dot_timestamp__pb2.Timestamp.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            ),
            'insert_fugle_over_bought': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_fugle_over_bought,
                    request_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_fugle_over_sold': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_fugle_over_sold,
                    request_deserializer=api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_open_price': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_open_price,
                    request_deserializer=api_dot_protos_dot_database__pb2.StockPrice.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_close_price': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_close_price,
                    request_deserializer=api_dot_protos_dot_database__pb2.StockPrice.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
            'insert_us_close_price': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_us_close_price,
                    request_deserializer=api_dot_protos_dot_database__pb2.StockPrice.FromString,
                    response_serializer=api_dot_protos_dot_database__pb2.RowCount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_stocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Database/get_stocks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            api_dot_protos_dot_database__pb2.Stock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_stock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/get_stock',
            api_dot_protos_dot_database__pb2.Symbol.SerializeToString,
            api_dot_protos_dot_database__pb2.Stock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upsert_stocks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Database/upsert_stocks',
            api_dot_protos_dot_database__pb2.Stock.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_ptt_trend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_ptt_trend',
            api_dot_protos_dot_database__pb2.TrendWithDefaultDate.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_reunion_trend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_reunion_trend',
            api_dot_protos_dot_database__pb2.TrendWithDefaultDate.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_over_bought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_over_bought',
            api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_over_sold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_over_sold',
            api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_twse_over_bought_by_date(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Database/query_twse_over_bought_by_date',
            google_dot_protobuf_dot_timestamp__pb2.Timestamp.SerializeToString,
            api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_twse_over_sold_by_date(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Database/query_twse_over_sold_by_date',
            google_dot_protobuf_dot_timestamp__pb2.Timestamp.SerializeToString,
            api_dot_protos_dot_database__pb2.BoughtOrSold.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_fugle_over_bought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_fugle_over_bought',
            api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_fugle_over_sold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_fugle_over_sold',
            api_dot_protos_dot_database__pb2.BoughtOrSold.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_open_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_open_price',
            api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_close_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_close_price',
            api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_us_close_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_us_close_price',
            api_dot_protos_dot_database__pb2.StockPrice.SerializeToString,
            api_dot_protos_dot_database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
